{
  "version": 3,
  "sources": ["../../@mui/utils/esm/useForkRef/useForkRef.js", "../../@mui/utils/esm/setRef/setRef.js", "../../@mui/utils/esm/extractEventHandlers/extractEventHandlers.js"],
  "sourcesContent": ["'use client';\r\n\r\nimport * as React from 'react';\r\nimport setRef from \"../setRef/index.js\";\r\n\r\n/**\r\n * Takes an array of refs and returns a new ref which will apply any modification to all of the refs.\r\n * This is useful when you want to have the ref used in multiple places.\r\n *\r\n * ```tsx\r\n * const rootRef = React.useRef<Instance>(null);\r\n * const refFork = useForkRef(rootRef, props.ref);\r\n *\r\n * return (\r\n *   <Root {...props} ref={refFork} />\r\n * );\r\n * ```\r\n *\r\n * @param {Array<React.Ref<Instance> | undefined>} refs The ref array.\r\n * @returns {React.RefCallback<Instance> | null} The new ref callback.\r\n */\r\nexport default function useForkRef(...refs) {\r\n  /**\r\n   * This will create a new function if the refs passed to this hook change and are all defined.\r\n   * This means react will call the old forkRef with `null` and the new forkRef\r\n   * with the ref. Cleanup naturally emerges from this behavior.\r\n   */\r\n  return React.useMemo(() => {\r\n    if (refs.every(ref => ref == null)) {\r\n      return null;\r\n    }\r\n    return instance => {\r\n      refs.forEach(ref => {\r\n        setRef(ref, instance);\r\n      });\r\n    };\r\n    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- intentionally ignoring that the dependency array must be an array literal\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, refs);\r\n}", "/**\r\n * TODO v5: consider making it private\r\n *\r\n * passes {value} to {ref}\r\n *\r\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\r\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\r\n * https://github.com/mui/material-ui/issues/13539\r\n *\r\n * Useful if you want to expose the ref of an inner component to the public API\r\n * while still using it inside the component.\r\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\r\n */\r\nexport default function setRef(ref, value) {\r\n  if (typeof ref === 'function') {\r\n    ref(value);\r\n  } else if (ref) {\r\n    ref.current = value;\r\n  }\r\n}", "/**\r\n * Extracts event handlers from a given object.\r\n * A prop is considered an event handler if it is a function and its name starts with `on`.\r\n *\r\n * @param object An object to extract event handlers from.\r\n * @param excludeKeys An array of keys to exclude from the returned object.\r\n */\r\nfunction extractEventHandlers(object, excludeKeys = []) {\r\n  if (object === undefined) {\r\n    return {};\r\n  }\r\n  const result = {};\r\n  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {\r\n    result[prop] = object[prop];\r\n  });\r\n  return result;\r\n}\r\nexport default extractEventHandlers;"],
  "mappings": ";;;;;;;;AAEA,YAAuB;;;ACWR,SAAR,OAAwB,KAAK,OAAO;AACzC,MAAI,OAAO,QAAQ,YAAY;AAC7B,QAAI,KAAK;AAAA,EACX,WAAW,KAAK;AACd,QAAI,UAAU;AAAA,EAChB;AACF;;;ADEe,SAAR,cAA+B,MAAM;AAM1C,SAAa,cAAQ,MAAM;AACzB,QAAI,KAAK,MAAM,SAAO,OAAO,IAAI,GAAG;AAClC,aAAO;AAAA,IACT;AACA,WAAO,cAAY;AACjB,WAAK,QAAQ,SAAO;AAClB,eAAO,KAAK,QAAQ;AAAA,MACtB,CAAC;AAAA,IACH;AAAA,EAGF,GAAG,IAAI;AACT;;;AEhCA,SAAS,qBAAqB,QAAQ,cAAc,CAAC,GAAG;AACtD,MAAI,WAAW,QAAW;AACxB,WAAO,CAAC;AAAA,EACV;AACA,QAAM,SAAS,CAAC;AAChB,SAAO,KAAK,MAAM,EAAE,OAAO,UAAQ,KAAK,MAAM,UAAU,KAAK,OAAO,OAAO,IAAI,MAAM,cAAc,CAAC,YAAY,SAAS,IAAI,CAAC,EAAE,QAAQ,UAAQ;AAC9I,WAAO,IAAI,IAAI,OAAO,IAAI;AAAA,EAC5B,CAAC;AACD,SAAO;AACT;AACA,IAAO,+BAAQ;",
  "names": []
}
