{
  "version": 3,
  "sources": ["../../@mui/x-tree-view/useTreeItem2/useTreeItem2.js", "../../@mui/x-tree-view/hooks/useTreeItem2Utils/useTreeItem2Utils.js", "../../@mui/x-tree-view/useTreeItem2/index.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport extractEventHandlers from '@mui/utils/extractEventHandlers';\r\nimport useForkRef from '@mui/utils/useForkRef';\r\nimport { useTreeViewContext } from \"../internals/TreeViewProvider/index.js\";\r\nimport { useTreeItem2Utils } from \"../hooks/useTreeItem2Utils/index.js\";\r\nimport { TreeViewItemDepthContext } from \"../internals/TreeViewItemDepthContext/index.js\";\r\nimport { isTargetInDescendants } from \"../internals/utils/tree.js\";\r\nimport { generateTreeItemIdAttribute } from \"../internals/corePlugins/useTreeViewId/useTreeViewId.utils.js\";\r\nexport const useTreeItem2 = parameters => {\r\n  const {\r\n    runItemPlugins,\r\n    items: {\r\n      onItemClick,\r\n      disabledItemsFocusable,\r\n      indentationAtItemLevel\r\n    },\r\n    selection: {\r\n      disableSelection,\r\n      checkboxSelection\r\n    },\r\n    expansion: {\r\n      expansionTrigger\r\n    },\r\n    treeId,\r\n    instance,\r\n    publicAPI\r\n  } = useTreeViewContext();\r\n  const depthContext = React.useContext(TreeViewItemDepthContext);\r\n  const {\r\n    id,\r\n    itemId,\r\n    label,\r\n    children,\r\n    rootRef\r\n  } = parameters;\r\n  const {\r\n    rootRef: pluginRootRef,\r\n    contentRef,\r\n    propsEnhancers\r\n  } = runItemPlugins(parameters);\r\n  const {\r\n    interactions,\r\n    status\r\n  } = useTreeItem2Utils({\r\n    itemId,\r\n    children\r\n  });\r\n  const rootRefObject = React.useRef(null);\r\n  const contentRefObject = React.useRef(null);\r\n  const handleRootRef = useForkRef(rootRef, pluginRootRef, rootRefObject);\r\n  const handleContentRef = useForkRef(contentRef, contentRefObject);\r\n  const checkboxRef = React.useRef(null);\r\n  const idAttribute = generateTreeItemIdAttribute({\r\n    itemId,\r\n    treeId,\r\n    id\r\n  });\r\n  const rootTabIndex = instance.canItemBeTabbed(itemId) ? 0 : -1;\r\n  const sharedPropsEnhancerParams = {\r\n    rootRefObject,\r\n    contentRefObject,\r\n    interactions\r\n  };\r\n  const createRootHandleFocus = otherHandlers => event => {\r\n    otherHandlers.onFocus?.(event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    const canBeFocused = !status.disabled || disabledItemsFocusable;\r\n    if (!status.focused && canBeFocused && event.currentTarget === event.target) {\r\n      instance.focusItem(event, itemId);\r\n    }\r\n  };\r\n  const createRootHandleBlur = otherHandlers => event => {\r\n    otherHandlers.onBlur?.(event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    const rootElement = instance.getItemDOMElement(itemId);\r\n\r\n    // Don't blur the root when switching to editing mode\r\n    // the input that triggers the root blur can be either the relatedTarget (when entering editing state) or the target (when exiting editing state)\r\n    // when we enter the editing state, we focus the input -> we don't want to remove the focused item from the state\r\n    if (status.editing ||\r\n    // we can exit the editing state by clicking outside the input (within the Tree Item) or by pressing Enter or Escape -> we don't want to remove the focused item from the state in these cases\r\n    // we can also exit the editing state by clicking on the root itself -> want to remove the focused item from the state in this case\r\n    event.relatedTarget && isTargetInDescendants(event.relatedTarget, rootElement) && (event.target && event.target?.dataset?.element === 'labelInput' && isTargetInDescendants(event.target, rootElement) || event.relatedTarget?.dataset?.element === 'labelInput')) {\r\n      return;\r\n    }\r\n    instance.removeFocusedItem();\r\n  };\r\n  const createRootHandleKeyDown = otherHandlers => event => {\r\n    otherHandlers.onKeyDown?.(event);\r\n    if (event.defaultMuiPrevented || event.target?.dataset?.element === 'labelInput') {\r\n      return;\r\n    }\r\n    instance.handleItemKeyDown(event, itemId);\r\n  };\r\n  const createLabelHandleDoubleClick = otherHandlers => event => {\r\n    otherHandlers.onDoubleClick?.(event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    interactions.toggleItemEditing();\r\n  };\r\n  const createContentHandleClick = otherHandlers => event => {\r\n    otherHandlers.onClick?.(event);\r\n    onItemClick?.(event, itemId);\r\n    if (event.defaultMuiPrevented || checkboxRef.current?.contains(event.target)) {\r\n      return;\r\n    }\r\n    if (expansionTrigger === 'content') {\r\n      interactions.handleExpansion(event);\r\n    }\r\n    if (!checkboxSelection) {\r\n      interactions.handleSelection(event);\r\n    }\r\n  };\r\n  const createContentHandleMouseDown = otherHandlers => event => {\r\n    otherHandlers.onMouseDown?.(event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n\r\n    // Prevent text selection\r\n    if (event.shiftKey || event.ctrlKey || event.metaKey || status.disabled) {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n  const createCheckboxHandleChange = otherHandlers => event => {\r\n    otherHandlers.onChange?.(event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    if (disableSelection || status.disabled) {\r\n      return;\r\n    }\r\n    interactions.handleCheckboxSelection(event);\r\n  };\r\n  const createIconContainerHandleClick = otherHandlers => event => {\r\n    otherHandlers.onClick?.(event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    if (expansionTrigger === 'iconContainer') {\r\n      interactions.handleExpansion(event);\r\n    }\r\n  };\r\n  const getRootProps = (externalProps = {}) => {\r\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\r\n\r\n    // https://www.w3.org/WAI/ARIA/apg/patterns/treeview/\r\n    let ariaSelected;\r\n    if (status.selected) {\r\n      // - each selected node has aria-selected set to true.\r\n      ariaSelected = true;\r\n    } else if (disableSelection || status.disabled) {\r\n      // - if the tree contains nodes that are not selectable, aria-selected is not present on those nodes.\r\n      ariaSelected = undefined;\r\n    } else {\r\n      // - all nodes that are selectable but not selected have aria-selected set to false.\r\n      ariaSelected = false;\r\n    }\r\n    const props = _extends({}, externalEventHandlers, {\r\n      ref: handleRootRef,\r\n      role: 'treeitem',\r\n      tabIndex: rootTabIndex,\r\n      id: idAttribute,\r\n      'aria-expanded': status.expandable ? status.expanded : undefined,\r\n      'aria-selected': ariaSelected,\r\n      'aria-disabled': status.disabled || undefined\r\n    }, externalProps, {\r\n      onFocus: createRootHandleFocus(externalEventHandlers),\r\n      onBlur: createRootHandleBlur(externalEventHandlers),\r\n      onKeyDown: createRootHandleKeyDown(externalEventHandlers)\r\n    });\r\n    if (indentationAtItemLevel) {\r\n      props.style = {\r\n        '--TreeView-itemDepth': typeof depthContext === 'function' ? depthContext(itemId) : depthContext\r\n      };\r\n    }\r\n    const enhancedRootProps = propsEnhancers.root?.(_extends({}, sharedPropsEnhancerParams, {\r\n      externalEventHandlers\r\n    })) ?? {};\r\n    return _extends({}, props, enhancedRootProps);\r\n  };\r\n  const getContentProps = (externalProps = {}) => {\r\n    const externalEventHandlers = extractEventHandlers(externalProps);\r\n    const props = _extends({}, externalEventHandlers, externalProps, {\r\n      ref: handleContentRef,\r\n      onClick: createContentHandleClick(externalEventHandlers),\r\n      onMouseDown: createContentHandleMouseDown(externalEventHandlers),\r\n      status\r\n    });\r\n    if (indentationAtItemLevel) {\r\n      props.indentationAtItemLevel = true;\r\n    }\r\n    const enhancedContentProps = propsEnhancers.content?.(_extends({}, sharedPropsEnhancerParams, {\r\n      externalEventHandlers\r\n    })) ?? {};\r\n    return _extends({}, props, enhancedContentProps);\r\n  };\r\n  const getCheckboxProps = (externalProps = {}) => {\r\n    const externalEventHandlers = extractEventHandlers(externalProps);\r\n    return _extends({}, externalEventHandlers, {\r\n      visible: checkboxSelection,\r\n      ref: checkboxRef,\r\n      checked: status.selected,\r\n      disabled: disableSelection || status.disabled,\r\n      tabIndex: -1\r\n    }, externalProps, {\r\n      onChange: createCheckboxHandleChange(externalEventHandlers)\r\n    });\r\n  };\r\n  const getLabelProps = (externalProps = {}) => {\r\n    const externalEventHandlers = _extends({}, extractEventHandlers(externalProps));\r\n    const props = _extends({}, externalEventHandlers, {\r\n      children: label\r\n    }, externalProps, {\r\n      onDoubleClick: createLabelHandleDoubleClick(externalEventHandlers)\r\n    });\r\n    if (instance.isTreeViewEditable) {\r\n      props.editable = status.editable;\r\n    }\r\n    return props;\r\n  };\r\n  const getLabelInputProps = (externalProps = {}) => {\r\n    const externalEventHandlers = extractEventHandlers(externalProps);\r\n    const enhancedLabelInputProps = propsEnhancers.labelInput?.({\r\n      rootRefObject,\r\n      contentRefObject,\r\n      externalEventHandlers,\r\n      interactions\r\n    }) ?? {};\r\n    return _extends({}, externalProps, enhancedLabelInputProps);\r\n  };\r\n  const getIconContainerProps = (externalProps = {}) => {\r\n    const externalEventHandlers = extractEventHandlers(externalProps);\r\n    return _extends({}, externalEventHandlers, externalProps, {\r\n      onClick: createIconContainerHandleClick(externalEventHandlers)\r\n    });\r\n  };\r\n  const getGroupTransitionProps = (externalProps = {}) => {\r\n    const externalEventHandlers = extractEventHandlers(externalProps);\r\n    const response = _extends({}, externalEventHandlers, {\r\n      unmountOnExit: true,\r\n      component: 'ul',\r\n      role: 'group',\r\n      in: status.expanded,\r\n      children\r\n    }, externalProps);\r\n    if (indentationAtItemLevel) {\r\n      response.indentationAtItemLevel = true;\r\n    }\r\n    return response;\r\n  };\r\n  const getDragAndDropOverlayProps = (externalProps = {}) => {\r\n    const externalEventHandlers = extractEventHandlers(externalProps);\r\n    const enhancedDragAndDropOverlayProps = propsEnhancers.dragAndDropOverlay?.(_extends({}, sharedPropsEnhancerParams, {\r\n      externalEventHandlers\r\n    })) ?? {};\r\n    return _extends({}, externalProps, enhancedDragAndDropOverlayProps);\r\n  };\r\n  return {\r\n    getRootProps,\r\n    getContentProps,\r\n    getGroupTransitionProps,\r\n    getIconContainerProps,\r\n    getCheckboxProps,\r\n    getLabelProps,\r\n    getLabelInputProps,\r\n    getDragAndDropOverlayProps,\r\n    rootRef: handleRootRef,\r\n    status,\r\n    publicAPI\r\n  };\r\n};", "import { useTreeViewContext } from \"../../internals/TreeViewProvider/index.js\";\r\nimport { useTreeViewLabel } from \"../../internals/plugins/useTreeViewLabel/index.js\";\r\nimport { hasPlugin } from \"../../internals/utils/plugins.js\";\r\n\r\n/**\r\n * Plugins that need to be present in the Tree View in order for `useTreeItem2Utils` to work correctly.\r\n */\r\n\r\n/**\r\n * Plugins that `useTreeItem2Utils` can use if they are present, but are not required.\r\n */\r\n\r\nconst isItemExpandable = reactChildren => {\r\n  if (Array.isArray(reactChildren)) {\r\n    return reactChildren.length > 0 && reactChildren.some(isItemExpandable);\r\n  }\r\n  return Boolean(reactChildren);\r\n};\r\nexport const useTreeItem2Utils = ({\r\n  itemId,\r\n  children\r\n}) => {\r\n  const {\r\n    instance,\r\n    selection: {\r\n      multiSelect\r\n    },\r\n    publicAPI\r\n  } = useTreeViewContext();\r\n  const status = {\r\n    expandable: isItemExpandable(children),\r\n    expanded: instance.isItemExpanded(itemId),\r\n    focused: instance.isItemFocused(itemId),\r\n    selected: instance.isItemSelected(itemId),\r\n    disabled: instance.isItemDisabled(itemId),\r\n    editing: instance?.isItemBeingEdited ? instance?.isItemBeingEdited(itemId) : false,\r\n    editable: instance.isItemEditable ? instance.isItemEditable(itemId) : false\r\n  };\r\n  const handleExpansion = event => {\r\n    if (status.disabled) {\r\n      return;\r\n    }\r\n    if (!status.focused) {\r\n      instance.focusItem(event, itemId);\r\n    }\r\n    const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\r\n\r\n    // If already expanded and trying to toggle selection don't close\r\n    if (status.expandable && !(multiple && instance.isItemExpanded(itemId))) {\r\n      instance.toggleItemExpansion(event, itemId);\r\n    }\r\n  };\r\n  const handleSelection = event => {\r\n    if (status.disabled) {\r\n      return;\r\n    }\r\n    if (!status.focused) {\r\n      instance.focusItem(event, itemId);\r\n    }\r\n    const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\r\n    if (multiple) {\r\n      if (event.shiftKey) {\r\n        instance.expandSelectionRange(event, itemId);\r\n      } else {\r\n        instance.selectItem({\r\n          event,\r\n          itemId,\r\n          keepExistingSelection: true\r\n        });\r\n      }\r\n    } else {\r\n      instance.selectItem({\r\n        event,\r\n        itemId,\r\n        shouldBeSelected: true\r\n      });\r\n    }\r\n  };\r\n  const handleCheckboxSelection = event => {\r\n    const hasShift = event.nativeEvent.shiftKey;\r\n    if (multiSelect && hasShift) {\r\n      instance.expandSelectionRange(event, itemId);\r\n    } else {\r\n      instance.selectItem({\r\n        event,\r\n        itemId,\r\n        keepExistingSelection: multiSelect,\r\n        shouldBeSelected: event.target.checked\r\n      });\r\n    }\r\n  };\r\n  const toggleItemEditing = () => {\r\n    if (!hasPlugin(instance, useTreeViewLabel)) {\r\n      return;\r\n    }\r\n    if (instance.isItemEditable(itemId)) {\r\n      if (instance.isItemBeingEdited(itemId)) {\r\n        instance.setEditedItemId(null);\r\n      } else {\r\n        instance.setEditedItemId(itemId);\r\n      }\r\n    }\r\n  };\r\n  const handleSaveItemLabel = (event, label) => {\r\n    if (!hasPlugin(instance, useTreeViewLabel)) {\r\n      return;\r\n    }\r\n\r\n    // As a side effect of `instance.focusItem` called here and in `handleCancelItemLabelEditing` the `labelInput` is blurred\r\n    // The `onBlur` event is triggered, which calls `handleSaveItemLabel` again.\r\n    // To avoid creating an unwanted behavior we need to check if the item is being edited before calling `updateItemLabel`\r\n    // using `instance.isItemBeingEditedRef` instead of `instance.isItemBeingEdited` since the state is not yet updated in this point\r\n    if (instance.isItemBeingEditedRef(itemId)) {\r\n      instance.updateItemLabel(itemId, label);\r\n      toggleItemEditing();\r\n      instance.focusItem(event, itemId);\r\n    }\r\n  };\r\n  const handleCancelItemLabelEditing = event => {\r\n    if (!hasPlugin(instance, useTreeViewLabel)) {\r\n      return;\r\n    }\r\n    if (instance.isItemBeingEditedRef(itemId)) {\r\n      toggleItemEditing();\r\n      instance.focusItem(event, itemId);\r\n    }\r\n  };\r\n  const interactions = {\r\n    handleExpansion,\r\n    handleSelection,\r\n    handleCheckboxSelection,\r\n    toggleItemEditing,\r\n    handleSaveItemLabel,\r\n    handleCancelItemLabelEditing\r\n  };\r\n  return {\r\n    interactions,\r\n    status,\r\n    publicAPI\r\n  };\r\n};", "import { useTreeItem2 as useTreeItem2Export } from \"./useTreeItem2.js\";\r\nexport const useTreeItem2 = useTreeItem2Export;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const unstable_useTreeItem2 = useTreeItem2Export;"],
  "mappings": "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",
  "names": ["useTreeItem2"]
}
